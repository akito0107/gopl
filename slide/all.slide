Go研修振り返り

20 April 2018
Tags: golang, present

伊藤　瑛

* Goについて
- 実際の案件に取り入れている
- 業務ロジックが乗ったAPIの開発
- 階層型アーキテクチャで開発
- 特に大きな問題なく順調に開発中（ただし伊藤はほとんどGoに触れていない）

* 振り返りトピック
- 難しかった課題
- 楽しかった課題
- 研修を通じて学んだこと
- 今後について

* 難しかった課題
3.8 精度の高い複素数の実装

- 計算が終わらない
- 結果が正しいのかが分からない


4.7 UTF-8でエンコードされた文字列を(メモリ割り当てなく)reverseする

- アルゴリズムが全く思いつかなかった


7章(インターフェース) 式評価機

- 経験がない部類のプログラミングだった
- parseのコードを理解せずに課題に取り掛かってしまった


12.10 `sexpr.Unmarshal` の実装

- interfaceの取扱がわからなかった
- Debugが難しい


* 楽しかった課題1
8.2 (FTPサーバ)

- 書きごたえがある課題だった
- pythonのftp serverを立てて、プロトコルをリバースエンジニアリング&RFCやWikiを読んで仕様解析
.link https://github.com/giampaolo/pyftpdlib

- `net.Conn` をStub化して、testを書きながら実装

=> 自分でtest可能なような設計を選択

* FTPサーバのテスト
.code -numbers session_test.go /^func TestSession_Handle/,/^}/


* 楽しかった課題2
9.3 キャンセル可能なキャッシュ

- 汎用性の高いコードでいろいろなところで使えそう
- Test時に `http.DefaultTransport` に `Proxy` を挟んで、レスポンスが遅い状態を再現、キャンセル時の挙動のTestを行った。

=> 標準の仕組みを活用

* memoのテスト
.code -numbers memo_test.go /^func TestMemo/,/^}/

* 研修を通じて
- Goは必要なものが揃っていて小さくまとまった言語仕様を持っている
- Goの言語仕様を網羅できた
- Goらしいコードに触れられた
- testについての考え方

今までは(jsでは)あらゆるところにmockを差し込めるようにコードを書いていた。
Goでは標準で提供されている仕組みを上手く使えば十分にtestabilityが高いコードを書ける（気がする）。

* 今後について
個人で

- Goの標準パッケージを勉強する
- Goらしいコードを意識する

組織で

- 標準FW化
- 案件に投入する
- 研修修了生でチーム組む

* まとめと感想
- 半年お疲れ様でした。
- なんとか完走できてよかった。
- Go言語広めていきたい。
